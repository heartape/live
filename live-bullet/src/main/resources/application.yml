server:
  port: 8002
spring:
  application:
    name: live-bullet
  cloud:
    nacos:
      discovery:
        server-addr: http://192.168.31.100:8848
        namespace: 72f9a09a-7b6b-46c7-81fa-20db037e98ff
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8888
          jwk-set-uri: http://localhost:8888/oauth2/jwks
  kafka:
    client-id: live-bullet-client
    bootstrap-servers:
      - 192.168.31.101:9092
      - 192.168.31.102:9092
      - 192.168.31.103:9092
    producer:
      retries: 0 # 重试次数
      acks: 1
      # batch-size: 16384 # 批量大小
      # buffer-memory: 33554432 # 生产端缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      compression-type: snappy
    consumer:
      enable-auto-commit: true # 是否自动提交offset
      auto-commit-interval: 100  # 提交offset延时(接收到消息后多久提交offset)
      # earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
      # latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
      # none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  data:
    redis:
      host: 192.168.31.100
      port: 6379
      database: 0

logging:
  level:
    com:
      heartape: debug

live:
  bullet:
    flow:
      max: 6
      init: 2
    filter:
      black: 3333
      room: 666, 114514
      max-long: 1000
